{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nexport default function useDate(events, nav) {\n  _s();\n\n  const [dateDisplay, setDateDisplay] = useState('');\n  const [days, setDays] = useState([]);\n\n  const eventForDate = date => events.find(e => e.date === date);\n\n  useEffect(() => {\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const dt = new Date();\n\n    if (nav !== 0) {\n      dt.setMonth(new Date().getMonth() + nav);\n    }\n\n    const day = dt.getDate();\n    const month = dt.getMonth();\n    const year = dt.getFullYear();\n    const firstDayOfMonth = new Date(year, month, 1);\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    const dateString = firstDayOfMonth.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    });\n    setDateDisplay(`${dt.toLocaleDateString('en-us', {\n      month: 'long'\n    })} ${year}`);\n    const paddingDays = weekdays.indexOf(dateString.split(', ')[0]);\n    const daysArr = [];\n\n    for (let i = 1; i <= paddingDays + daysInMonth; i++) {\n      const dayString = `${month + 1}/${i - paddingDays}/${year}`;\n\n      if (i > paddingDays) {\n        daysArr.push({\n          value: i - paddingDays,\n          event: eventForDate(dayString),\n          isCurrentDay: i - paddingDays === day && nav === 0,\n          date: dayString\n        });\n      } else {\n        daysArr.push({\n          value: 'padding',\n          event: null,\n          isCurrentDay: false,\n          date: ''\n        });\n      }\n    }\n\n    setDays(daysArr);\n  }, [events, nav]);\n  return {\n    days,\n    dateDisplay\n  };\n}\n\n_s(useDate, \"rcslRhdCyIQRjIZKCVmFSXoLsMo=\");\n\n;","map":{"version":3,"sources":["/Users/gonzaloRocamora/Desktop/realBeauty/src/calendar/useDate.js"],"names":["React","useEffect","useState","useDate","events","nav","dateDisplay","setDateDisplay","days","setDays","eventForDate","date","find","e","weekdays","dt","Date","setMonth","getMonth","day","getDate","month","year","getFullYear","firstDayOfMonth","daysInMonth","dateString","toLocaleDateString","weekday","paddingDays","indexOf","split","daysArr","i","dayString","push","value","event","isCurrentDay"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport default function useDate  (events, nav)  {\n  const [dateDisplay, setDateDisplay] = useState('');\n  const [days, setDays] = useState([]);\n\n  const eventForDate = date => events.find(e => e.date === date);\n\n  useEffect(() => {\n    const weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    const dt = new Date();\n\n    if (nav !== 0) {\n      dt.setMonth(new Date().getMonth() + nav);\n    }\n\n    const day = dt.getDate();\n    const month = dt.getMonth();\n    const year = dt.getFullYear();\n\n    const firstDayOfMonth = new Date(year, month, 1);\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n    const dateString = firstDayOfMonth.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n    });\n\n    setDateDisplay(`${dt.toLocaleDateString('en-us', { month: 'long' })} ${year}`);\n    const paddingDays = weekdays.indexOf(dateString.split(', ')[0]);\n\n    const daysArr = [];\n\n    for (let i = 1; i <= paddingDays + daysInMonth; i++) {\n      const dayString = `${month + 1}/${i - paddingDays}/${year}`;\n\n      if (i > paddingDays) {\n        daysArr.push({\n          value: i - paddingDays,\n          event: eventForDate(dayString),\n          isCurrentDay: i - paddingDays === day && nav === 0,\n          date: dayString,\n        });\n      } else {\n        daysArr.push({\n          value: 'padding',\n          event: null,\n          isCurrentDay: false,\n          date: '',\n        });\n      }\n    }\n\n    setDays(daysArr);\n  }, [events, nav]);\n\n  return {\n    days,\n    dateDisplay,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}